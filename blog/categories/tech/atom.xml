<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | Luc Dewavrin's weblog]]></title>
  <link href="http://www.dewavrin.info/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://www.dewavrin.info/"/>
  <updated>2012-12-08T20:14:19+01:00</updated>
  <id>http://www.dewavrin.info/</id>
  <author>
    <name><![CDATA[Luc Dewavrin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OSGI survey]]></title>
    <link href="http://www.dewavrin.info/blog/osgi-survey/"/>
    <updated>2009-05-05T00:00:00+02:00</updated>
    <id>http://www.dewavrin.info/blog/osgi-survey</id>
    <content type="html"><![CDATA[<iframe frameborder='0' height='344' marginheight='0' marginwidth='0' src='https://docs.google.com/spreadsheet/embeddedform?formkey=ckhzRjlyekdjYWtGZnlKYlZUYU0zM0E6MA..' width='760'>Loading...</iframe>
<p>The results:</p>

<p><img alt='' src='https://docs.google.com/spreadsheet/oimg?key=0Akkf5_MgAMxgckhzRjlyekdjYWtGZnlKYlZUYU0zM0E&amp;oid=2&amp;zx=2cx0p6mjlgp5' /></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mimic facelet layouts in grails]]></title>
    <link href="http://www.dewavrin.info/blog/mimic-facelet-layouts-in-grails/"/>
    <updated>2009-04-27T00:00:00+02:00</updated>
    <id>http://www.dewavrin.info/blog/mimic-facelet-layouts-in-grails</id>
    <content type="html"><![CDATA[<p>I wanted to mimic facelets &#60;ui:insert /&#62; and &#60;ui:define /&#62; tags in grails.I find facelets to be quite powerful because it allows to define a fragment in your template that can be redefined by the view, otherwise a default fragment is displayed.It can be useful for instance for a menu where you want all views to use a default menu and some use another menu.</p>

<p>In facelets, you would create a template file and add a &#60;ui:insert /&#62; statement for the menu, like this: <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;ui:insert name=&amp;quot;menu&amp;quot;&#39;</span><span class="nt">&gt;</span>ui:insert name=<span class="ni">&amp;quot;</span>menu<span class="ni">&amp;quot;</span><span class="nt">&lt;/a&gt;</span> <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;ui:include src=&amp;quot;../frags/menu.xhtml&amp;quot; /&#39;</span><span class="nt">&gt;</span>ui:include src=<span class="ni">&amp;quot;</span>../frags/menu.xhtml<span class="ni">&amp;quot;</span> /<span class="nt">&lt;/a&gt;</span> <span class="ni">&amp;lt;</span>/ui:insert<span class="ni">&amp;gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div> Here the <span class='Apple-style-span' style='font-weight: bold'>&lt;ui:insert/&gt;</span> statement by default includes with the help of the <span class='Apple-style-span' style='font-weight: bold'>&lt;ui:include/&gt;</span>element a menu fragment (a partial page).</p>

<p>In your view you could if wanted redefine the menu with the <span class='Apple-style-span' style='font-weight: bold'>&lt;ui:define/&gt;</span> element, like this: <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;ui:composition template=&amp;quot;layout/template.xhtml&amp;quot;&#39;</span><span class="nt">&gt;</span>ui:composition template=<span class="ni">&amp;quot;</span>layout/template.xhtml<span class="ni">&amp;quot;</span><span class="nt">&lt;/a&gt;</span> <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;ui:define name=&amp;quot;menu&amp;quot; /&#39;</span><span class="nt">&gt;</span>ui:define name=<span class="ni">&amp;quot;</span>menu<span class="ni">&amp;quot;</span> /<span class="nt">&lt;/a&gt;</span> <span class="ni">&amp;lt;</span>/ui:composition<span class="ni">&amp;gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
<div>Override default menu here </div>
<p>Grails template system is handled by sitemesh. To achieve the same goal, you can in your template file (layout/main.gsp for instance), add the following element for the menu : <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&#39;g:pageproperty name=&amp;quot;page.menu&amp;quot; default=&amp;quot;${render(template:&amp;apos;/frags/menu&amp;apos;)}&amp;quot; /&#39;</span><span class="nt">&gt;</span>g:pageproperty name=<span class="ni">&amp;quot;</span>page.menu<span class="ni">&amp;quot;</span> default=<span class="ni">&amp;quot;</span>${render(template:<span class="ni">&amp;apos;</span>/frags/menu<span class="ni">&amp;apos;</span>)}<span class="ni">&amp;quot;</span> /<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It achieves the same purpose, actually instead of defining a page section like in facelets, it displays the calling page&#8217;s <b>&lt;content&gt;</b> element named menu if present (control is inverted but the result is the same).Otherwise, if the &#60;content&#62; element is not found, the menu fragment is rendered.The fragment page should be in our example created in the frags directory under the name _menu.gsp. In your view, you can therefore define the menu section of your template by declaring a content element. <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;html&gt;</span>
</span><span class='line'>   <span class="nt">&lt;head&gt;</span>
</span><span class='line'>     <span class="nt">&lt;meta</span> <span class="na">content=</span><span class="s">&#39;text/html; charset=UTF-8&#39;</span> <span class="na">http-equiv=</span><span class="s">&#39;Content-Type&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>     <span class="nt">&lt;meta</span> <span class="na">content=</span><span class="s">&#39;main&#39;</span> <span class="na">name=</span><span class="s">&#39;layout&#39;</span> <span class="nt">/&gt;</span>
</span><span class='line'>     <span class="nt">&lt;title&gt;</span>Show Book<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>     <span class="nt">&lt;content</span> <span class="na">tag=</span><span class="s">&#39;menu&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div&gt;</span>Override default menu here<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/content&gt;</span>
</span><span class='line'>     <span class="c">&lt;!-- More content here --&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seam usage in production]]></title>
    <link href="http://www.dewavrin.info/blog/seam-usage-in-production/"/>
    <updated>2009-03-30T00:00:00+02:00</updated>
    <id>http://www.dewavrin.info/blog/seam-usage-in-production</id>
    <content type="html"><![CDATA[<p>There &#8216;s an interesting <a href='http://www.seamframework.org/Community/SeamInProfessionalUse'>thread</a> on the Seam forum about Seam in &#8220;profesional use&#8221;. Performance and steep learning curve are often mentioned as drawbacks.</p>

<p>Seam heavily relies on proxy based components created by javassist. And javassist is known to be unperformant <a href='https://jira.jboss.org/jira/browse/JBSEAM-1977'>compared to cglib</a>. This library might have been chosen due to politic reason at JBoss. Seam Managed Persistence Context (SMPC) is also seen as a culprit but i guess that like many other frameworks you have to understand what&#8217;s underneath the carpet, lazy loading in some use cases can really hit performance.</p>

<p>Scalability is not mentioned but i guess that since Seam is stateful it also can be an issue for large websites.</p>

<p>For the learning curve, it might be true if you don&#8217;t come from the JavaEE world or have never developed JSF applications. Seam still requires good knowledge of JSF 1.X and how it corrects it in many ways. The request lifecycle is also complex albeit powerful.Also other &#8220;lightweight&#8221; JSF based frameworks are quoted like <a href='https://makefaces.dev.java.net/'>makefaces</a>.</p>

<p>Seam for me is both a IOC container specialized for web development and a web integration framework of Java EE (Ejb,Web beans), JBoss stack (jBPM, Drools, Richfaces, JSFUnit) and commonly used libraries (quartz,jfreechart, itext, javamail,etc.) It also addresses many commonly asked features (conversations, mail sending, page caching,etc.) I am not sure for the future of Seam. Seam 3 might be a complete rewrite due to support of JSF 2 and JSR-299 aka <em>Java Contexts and Dependency Injection</em>, but it is a comprehensive and efficient web framework with a decent IDE (JBoss tools).</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Economic downturn and impact on javabloggers]]></title>
    <link href="http://www.dewavrin.info/blog/economic-downturn-and-impact-on-javabloggers/"/>
    <updated>2009-02-17T00:00:00+01:00</updated>
    <id>http://www.dewavrin.info/blog/economic-downturn-and-impact-on-javabloggers</id>
    <content type="html"><![CDATA[<p>I wanted to know if the economic crisis had an impact on blogging. I was curious because it seemed for me that the blogs that i usually follow had less activity  . With the help of a groovy script and gchart, here&#8217;s the last 2 years monthly blog posts count (don&#8217;t know why there&#8217;s a high peak for July 07). It seems that, so far, java bloggers still post.<img alt='' src='http://chart.apis.google.com/chart?cht=lc&amp;chs=600x500&amp;chtt=Javablogs+monthly+posts+count%20+%7C+since+01-01-2007+to+01-02-2009&amp;chxt=x,y&amp;chxr=1,0,15000&amp;chds=0,15000&amp;chd=t:4224,4133,4758,4474,5561,4933,14719,5155,4515,5301,5047,4862,5341,3975,5278,3826,5527,4271,4471,4305,4548,4480,4347,4993,4520&amp;chxl=0:%7C1-07%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C1-08%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C10%7C11%7C12%7C1-09' /></p>

<p>For the quality of the blog posts that&#8217;s another story but my blog is not a good example ;-)</p>

<p>The source</p>

<p><div><script src='https://gist.github.com/1568387.js?file='><!-- test --></script>
<noscript><pre><code>import java.util.*;


/**
 * @author Luc
 * Change startDate and endDate (must span at least 2 full months)
 * 
 */
 def sdf = new java.text.SimpleDateFormat(&quot;dd-MM-yyyy&quot;)

 def baseUrl = &quot;http://www.javablogs.com&quot;
 def startDate = sdf.parse(&quot;01-01-2007&quot;)
 def endDate = sdf.parse(&quot;01-02-2009&quot;)
 def resultMap = [:] as TreeMap
 
def addStatsForDate = { Calendar c -&gt;
		def dayOfMonth = c.get(Calendar.DAY_OF_MONTH)
		def month = c.get(Calendar.MONTH)
		def year = c.get(Calendar.YEAR)
		def xmlSurpler = new XmlSlurper()
		def url = &quot;${baseUrl}/ViewDaysBlogs.action?date=${dayOfMonth}&amp;month=${month}&amp;year=${year}&amp;view=rss&quot;
		def rss = xmlSurpler.parse(url)
		def items = rss.channel.item
		resultMap[c.getTimeInMillis()]=items.size()
		println &quot;Processed date ${dayOfMonth} ${month+1} ${year}&quot;
}

def encodeMap = {
  List list = []
  for (i in (('A'..'Z') + ('a'..'z') + (0..9)))  {
    list &lt;&lt; i
  }
  String s = &quot;&amp;chd=t:&quot;
  def resultByYears = [:]
  int curYear = -1
  
  resultMap.each { long t,int v -&gt;
      Calendar c = Calendar.getInstance()
      c.setTimeInMillis(t)
	  if (c.get(Calendar.YEAR)!=curYear) {
		  curYear = c.get(Calendar.YEAR)
		  resultByYears[curYear]=[:]
	  }
	  int count = resultByYears[curYear][c.get(Calendar.MONTH)]?:0
	  count+=v
	  resultByYears[curYear][c.get(Calendar.MONTH)]=count
  }
  resultByYears.values().eachWithIndex { val,index -&gt;
  	  if (index &gt; 0) {
  		  s+=&quot;,&quot;
  	  }
	  s+=val.values().join(&quot;,&quot;)
  }

  s += &quot;&amp;chxl=0:|&quot;
  resultByYears.eachWithIndex { k,v,index -&gt;
      println k
  	  if (index &gt; 0) {
  		  s+=&quot;|&quot;
  	  }
  	
	  s+=v.keySet().collect{
		  (it+1)+&quot;-&quot;+&quot;${k}&quot;[-2..-1]
	  }.join(&quot;|&quot;)
  }
  	  
  return s
}

	
def createGChart = {
   def chartTitle = URLEncoder.encode(&quot;Javablogs monthly frequentation | since ${sdf.format(startDate)} to ${sdf.format(endDate)}&quot;)
   def url=&quot;http://chart.apis.google.com/chart?cht=lc&amp;chs=500x500&amp;chtt=${chartTitle}&amp;chxt=x,y&amp;chxr=1,0,10000&amp;chds=0,10000&quot;+encodeMap()
   return url
}
	
def currentDate = Calendar.getInstance()
currentDate.setTime(startDate)
while(currentDate.getTimeInMillis() &lt; endDate.getTime()) {
	addStatsForDate(currentDate)
	currentDate.add(Calendar.DAY_OF_MONTH,1)
}

def url = createGChart()
print url
</code></pre></noscript></div>
</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Maven tips]]></title>
    <link href="http://www.dewavrin.info/blog/some-maven-tips/"/>
    <updated>2009-02-07T00:00:00+01:00</updated>
    <id>http://www.dewavrin.info/blog/some-maven-tips</id>
    <content type="html"><![CDATA[<p>First post of the year, here are some Maven tips you might find useful (or obvious for experienced users):</p>

<ul>
<li>
<p><strong>How to version commercial libraries in your SCM and use them as dependency ?</strong> In case you don&#8217;t have your own central repository and you&#8217;d like to version your libraries in your SCM server, you can declare in your pom a repository like this : <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>    <span class="nt">&lt;id&gt;</span>sipphonyrepo<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url&gt;</span>file:///${basedir}/../repository<span class="nt">&lt;/url&gt;</span>
</span><span class='line'><span class="nt">&lt;/repository&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div> The &#8216;repository&#8217; directory should be versioned in your scm server but it also means that it should be checked out with your project. Also like any other repository, the dependencies will be copied in your local repository.</p>
</li>

<li>
<p><strong>How to just copy files</strong> ?It might be useful on a development machine to copy files while installing an artifact, for instance you might want to copy a JBoss datasource file to a JBoss profile to make sure it&#8217;s deployed. For this you can use the Maven resource plugins. For instance the following plugin statement will copy the datasource file to your JBoss server&#8217;s default profile deployment directory if JBOSS_HOME environment library is defined (on the development machine) : <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;profile&gt;</span>
</span><span class='line'><span class="nt">&lt;id&gt;</span>jboss.deploy<span class="nt">&lt;/id&gt;</span>
</span><span class='line'><span class="nt">&lt;activation&gt;</span>
</span><span class='line'><span class="nt">&lt;property&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>env.JBOSS_HOME<span class="nt">&lt;/name&gt;</span>
</span><span class='line'><span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/activation&gt;</span>
</span><span class='line'><span class="nt">&lt;build&gt;</span>
</span><span class='line'> <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>    <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactid&gt;</span>maven-resources-plugin<span class="nt">&lt;/artifactid&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>2.3<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>          <span class="nt">&lt;id&gt;</span>copy-ds<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>          <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goal&gt;</span>copy-resources<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>          <span class="nt">&lt;phase&gt;</span>install<span class="nt">&lt;/phase&gt;</span>
</span><span class='line'>          <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>             <span class="nt">&lt;outputdirectory&gt;</span>${env.JBOSS_HOME}/server/default/deploy<span class="nt">&lt;/outputdirectory&gt;</span>
</span><span class='line'>             <span class="nt">&lt;resources&gt;</span>
</span><span class='line'>               <span class="nt">&lt;resource&gt;</span>
</span><span class='line'>                <span class="nt">&lt;directory&gt;</span>${basedir}<span class="nt">&lt;/directory&gt;</span>
</span><span class='line'>                <span class="nt">&lt;includes&gt;</span>
</span><span class='line'>                   <span class="nt">&lt;include&gt;</span>mysql-ds.xml<span class="nt">&lt;/include&gt;</span>
</span><span class='line'>               <span class="nt">&lt;/includes&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/resource&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/resources&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'> <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/build&gt;</span>
</span><span class='line'><span class="nt">&lt;/profile&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
</li>

<li>
<p><strong>How to perform complex build build logic ?</strong> One solution would be to use profiles for that like in the above example. But it can quickly become cumbersome and limited. So a good option is to use Ant Maven plugin with <a href='http://ant-contrib.sourceforge.net/'>ant-contribs</a> dependency for control statements and loops or even better the <a href='http://groovy.codehaus.org/GMaven'>groovy GMaven plugin</a> (avoiding XML verbosity).Profiles have still the benefit of clearly identifying an intent in your build. The following command will list all profiles: <div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn help:all-profiles</span></code></pre></td></tr></table></div></figure></notextile></div></p>
</li>
</ul>

<p>If build logic can be extracted and used in different contexts, it&#8217;s time to create a plugin. It&#8217;s quite simple.</p>

<ul>
<li><strong>How to create an artifact of a zip or tar ?</strong> One obvious solution is to use maven assembly plugin but if you need to add some custom logic during packaging, you could just create the zip or tar file with Ant maven plugin or groovy GMaven plugin and gant during the package phase. Then attach the file to your project with Maven <a href='http://mojo.codehaus.org/build-helper-maven-plugin/attach-artifact-mojo.html'>build helper plugin</a> and its <strong>attach-artifact</strong> goal to install it in your repository during the install phase. Once installed in your local repository, the zip or tar file can be become a dependency, just use the proper type in the dependency declaration. <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="nt">&lt;type&gt;</span>zip<span class="nt">&lt;/type&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>

<li><strong>How to create a full delivery layout with multiple archetype ?</strong> My advice for creating a comprehensive delivery directory structure would be to use a dedicated module, take advantage of ant,assembly and resource plugins for that. Struts2 has such a module : <a href='http://svn.apache.org/repos/asf/struts/struts2/trunk/assembly/pom.xml'>see the assembly module&#8217;s pom</a></li>
</ul>]]></content>
  </entry>
  
</feed>
